{
  "version": 3,
  "file": "ngx-progressbar-core.umd.js",
  "sources": [
    "ng://@ngx-progressbar/core/src/ng-progress.component.ts",
    "ng://@ngx-progressbar/core/src/ng-progress.service.ts",
    "ng://@ngx-progressbar/core/src/ng-progress.token.ts",
    "ng://@ngx-progressbar/core/src/ng-progress-ref.ts"
  ],
  "sourcesContent": [
    "/**\r\n * @license\r\n * Copyright ngx-progressbar All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://github.com/MurhafSousli/ngx-progressbar/blob/master/LICENSE\r\n */\r\n\r\nimport {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ChangeDetectionStrategy,\r\n  EventEmitter,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { NgProgress } from './ng-progress.service';\r\nimport { NgProgressRef } from './ng-progress-ref';\r\nimport { NgProgressState } from './ng-progress.interface';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { map } from 'rxjs/operators/map';\r\n\r\n@Component({\r\n  selector: 'ng-progress',\r\n  host: {\r\n    'role': 'progressbar',\r\n    '[attr.spinnerPosition]': 'spinnerPosition',\r\n    '[attr.dir]': 'direction',\r\n    '[attr.thick]': 'thick',\r\n    '[attr.style]': `sanitizer.bypassSecurityTrustStyle('--color:' + color + ';--speed:' + speed + 'ms;--ease:' + ease)`\r\n  },\r\n  template: `\r\n    <ng-container *ngIf=\"state$ | async; let state\">\r\n      <div class=\"ng-progress-bar\" [class.-active]=\"state.active\">\r\n        <div class=\"bar-placeholder\">\r\n          <div class=\"bar\" [ngStyle]=\"state.transform\">\r\n            <div *ngIf=\"meteor\" class=\"meteor\"></div>\r\n          </div>\r\n        </div>\r\n        <div *ngIf=\"spinner\" class=\"spinner\">\r\n          <div class=\"spinner-icon\"></div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n  `,\r\n  styles: [`ng-progress {\n  z-index: 999999;\n  pointer-events: none;\n  position: relative; }\n\n.ng-progress-bar {\n  z-index: 999999;\n  top: 0;\n  left: 0;\n  width: 100%;\n  position: fixed;\n  zoom: 1;\n  filter: alpha(opacity=0);\n  opacity: 0;\n  -webkit-transition: opacity var(--speed) var(--ease);\n  transition: opacity var(--speed) var(--ease); }\n  .ng-progress-bar .bar {\n    -webkit-transition: none;\n    transition: none; }\n  .ng-progress-bar.-active {\n    filter: alpha(opacity=100);\n    opacity: 1;\n    -webkit-transition: none;\n    transition: none; }\n    .ng-progress-bar.-active .bar {\n      -webkit-transition: all var(--speed) var(--ease);\n      transition: all var(--speed) var(--ease); }\n\n.bar-placeholder {\n  position: absolute;\n  height: 2px;\n  width: 100%; }\n\n.bar {\n  width: 100%;\n  height: 100%;\n  -webkit-transform: translate(-100%, 0, 0);\n          transform: translate(-100%, 0, 0);\n  background-color: var(--color); }\n\n.meteor {\n  display: block;\n  position: absolute;\n  width: 100px;\n  height: 100%;\n  opacity: 1.0;\n  -webkit-box-shadow: 0 0 10px var(--color), 0 0 5px var(--color);\n          box-shadow: 0 0 10px var(--color), 0 0 5px var(--color); }\n\n.spinner {\n  display: block;\n  position: fixed;\n  z-index: 1031;\n  top: 15px; }\n\n.spinner-icon {\n  width: 18px;\n  height: 18px;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  -webkit-animation: spinner-animation 400ms linear infinite;\n          animation: spinner-animation 400ms linear infinite;\n  border: 2px solid transparent;\n  border-radius: 50%;\n  border-top-color: var(--color);\n  border-left-color: var(--color); }\n\n[dir='ltr+'] .meteor, [dir='ltr-'] .meteor {\n  -webkit-transform: rotate(3deg);\n          transform: rotate(3deg); }\n\n[dir='ltr+'][thick='true'] .meteor, [dir='ltr-'][thick='true'] .meteor {\n  -webkit-transform: rotate(4deg);\n          transform: rotate(4deg); }\n\n[dir='ltr+'] .bar, [dir='rtl+'] .bar {\n  margin-left: -100%; }\n\n[dir='ltr+'] .meteor, [dir='rtl+'] .meteor {\n  right: 0; }\n\n[dir='ltr+'] .meteor, [dir='rtl-'] .meteor {\n  top: -3px; }\n\n[dir='ltr+'][thick='true'] .meteor, [dir='rtl-'][thick='true'] .meteor {\n  top: -4px; }\n\n[dir='ltr-'] .meteor, [dir='rtl+'] .meteor {\n  bottom: -3px; }\n\n[dir='ltr-'][thick='true'] .meteor, [dir='rtl+'][thick='true'] .meteor {\n  bottom: -4px; }\n\n[dir='ltr-'] .bar-placeholder, [dir='rtl+'] .bar-placeholder {\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg); }\n\n[dir='ltr-'] .spinner-icon, [dir='rtl+'] .spinner-icon {\n  animation-direction: reverse; }\n\n[dir='rtl+'] .meteor, [dir='rtl-'] .meteor {\n  -webkit-transform: rotate(-3deg);\n          transform: rotate(-3deg); }\n\n[dir='rtl+'][thick='true'] .meteor, [dir='rtl-'][thick='true'] .meteor {\n  -webkit-transform: rotate(-4deg);\n          transform: rotate(-4deg); }\n\n[thick='true'] .spinner-icon {\n  width: 24px;\n  height: 24px;\n  border-width: 3px; }\n\n[thick='true'] .bar-placeholder {\n  height: 3px; }\n\n[spinnerPosition='left'] .spinner {\n  left: 15px;\n  right: unset; }\n\n[spinnerPosition='right'] .spinner {\n  right: 15px; }\n\n@-webkit-keyframes spinner-animation {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n@keyframes spinner-animation {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n`],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  preserveWhitespaces: false\r\n})\r\n\r\nexport class NgProgressComponent implements OnInit, OnChanges, OnDestroy {\r\n\r\n  private _started$: Subscription;\r\n  private _completed$: Subscription;\r\n\r\n  /** Progress bar worker */\r\n  progressRef: NgProgressRef;\r\n\r\n  /** Progress state stream */\r\n  state$: Observable<{ active: boolean, transform: any }>;\r\n\r\n  /** Creates a new instance if id is not already exists */\r\n  @Input() id = 'root';\r\n\r\n  /** Initializes inputs from the global config */\r\n  @Input() spinnerPosition: 'left' | 'right' = this._ngProgress.config.spinnerPosition;\r\n  @Input() direction: 'ltr+' | 'ltr-' | 'rtl+' | 'rtl-' = this._ngProgress.config.direction;\r\n  @Input() ease: string = this._ngProgress.config.ease;\r\n  @Input() color: string = this._ngProgress.config.color;\r\n  @Input() meteor: boolean = this._ngProgress.config.meteor;\r\n  @Input() spinner: boolean = this._ngProgress.config.spinner;\r\n  @Input() thick: boolean = this._ngProgress.config.thick;\r\n  @Input() max: number = this._ngProgress.config.max;\r\n  @Input() min: number = this._ngProgress.config.min;\r\n  @Input() speed: number = this._ngProgress.config.speed;\r\n  @Input() trickleSpeed: number = this._ngProgress.config.trickleSpeed;\r\n\r\n  @Output() started = new EventEmitter();\r\n  @Output() completed = new EventEmitter();\r\n\r\n  constructor(private _ngProgress: NgProgress, public sanitizer: DomSanitizer) {\r\n  }\r\n\r\n  ngOnChanges() {\r\n    if (this.progressRef instanceof NgProgressRef) {\r\n\r\n      // Update progress bar config when input changes\r\n      this.progressRef.setConfig({\r\n        max: (this.max > 0 && this.max <= 100) ? this.max : 100,\r\n        min: (this.min < 100 && this.min >= 0) ? this.min : 0,\r\n        speed: this.speed,\r\n        trickleSpeed: this.trickleSpeed,\r\n      });\r\n    } else {\r\n\r\n      // Get progress bar service instance\r\n      this.progressRef = this._ngProgress.ref(this.id, {\r\n        max: this.max,\r\n        min: this.min,\r\n        speed: this.speed,\r\n        trickleSpeed: this.trickleSpeed,\r\n      });\r\n      this.state$ = this.progressRef.state$.pipe(map((state: NgProgressState) => ({\r\n        active: state.active,\r\n        transform: {transform: `translate3d(${state.value}%, 0, 0)`}\r\n      })));\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    /** Subscribes to started and completed events when user used them */\r\n    if (this.started.observers.length) {\r\n      this._started$ = this.progressRef.started.subscribe(() => this.started.next());\r\n    }\r\n    if (this.completed.observers.length) {\r\n      this._completed$ = this.progressRef.completed.subscribe(() => this.completed.next());\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._started$) {\r\n      this._started$.unsubscribe();\r\n    }\r\n    if (this._completed$) {\r\n      this._completed$.unsubscribe();\r\n    }\r\n    this._ngProgress.destroy(this.id);\r\n  }\r\n\r\n  start() {\r\n    this.progressRef.start();\r\n  }\r\n\r\n  complete() {\r\n    this.progressRef.complete();\r\n  }\r\n\r\n  inc(n?: number) {\r\n    this.progressRef.inc(n);\r\n  }\r\n\r\n  set(n: number) {\r\n    this.progressRef.set(n);\r\n  }\r\n\r\n  get isStarted() {\r\n    return this.progressRef.isStarted;\r\n  }\r\n}\r\n",
    "import { Injectable, Inject, Optional } from '@angular/core';\r\nimport { NgProgressRef } from './ng-progress-ref';\r\nimport { NgProgressConfig } from './ng-progress.interface';\r\nimport { empty } from 'rxjs/observable/empty';\r\nimport { CONFIG } from './ng-progress.token';\r\n\r\nconst defaultConfig: NgProgressConfig = {\r\n  meteor: true,\r\n  spinner: true,\r\n  thick: false,\r\n  ease: 'linear',\r\n  spinnerPosition: 'right',\r\n  direction: 'ltr+',\r\n  color: '#1B95E0',\r\n  max: 100,\r\n  min: 8,\r\n  speed: 200,\r\n  trickleSpeed: 300\r\n};\r\n\r\n@Injectable()\r\nexport class NgProgress {\r\n\r\n  /** Stores NgProgressRef instances */\r\n  private readonly _instances = {};\r\n\r\n  /** Global config */\r\n  config: NgProgressConfig;\r\n\r\n  constructor(@Optional() @Inject(CONFIG) config: NgProgressConfig) {\r\n    this.config = {...defaultConfig, ...config};\r\n  }\r\n\r\n  /**\r\n   * Returns NgProgressRef by ID\r\n   */\r\n  ref(id = 'root', config?: NgProgressConfig) {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      return this._instances[id];\r\n    } else {\r\n      config = {...this.config, ...config};\r\n      return this._instances[id] = new NgProgressRef(config);\r\n    }\r\n  }\r\n\r\n  setConfig(config: NgProgressConfig, id = 'root') {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      this._instances[id].setConfig(config);\r\n    }\r\n  }\r\n\r\n  start(id = 'root') {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      this._instances[id].start();\r\n    }\r\n  }\r\n\r\n  set(n: number, id = 'root') {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      this._instances[id].set(n);\r\n    }\r\n  }\r\n\r\n  inc(n?: number, id = 'root') {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      this._instances[id].inc(n);\r\n    }\r\n  }\r\n\r\n  complete(id = 'root') {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      this._instances[id].complete();\r\n    }\r\n  }\r\n\r\n  isStarted(id = 'root') {\r\n    return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].isStarted : false;\r\n  }\r\n\r\n  started(id = 'root') {\r\n    return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].started : empty();\r\n  }\r\n\r\n  completed(id = 'root') {\r\n    return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].ended : empty();\r\n  }\r\n\r\n  destroy(id = 'root') {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      this._instances[id].destroy();\r\n      this._instances[id] = null;\r\n    }\r\n  }\r\n\r\n  destroyAll() {\r\n    Object.keys(this._instances).map((key) => {\r\n      this._instances[key].destroy();\r\n      this._instances[key] = null;\r\n    });\r\n  }\r\n}\r\n",
    "import { InjectionToken } from '@angular/core';\r\nimport { NgProgressConfig } from './ng-progress.interface';\r\n\r\nexport const CONFIG = new InjectionToken<NgProgressConfig>('config');\r\n",
    "import { NgProgressState, NgProgressConfig } from './ng-progress.interface';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { timer } from 'rxjs/observable/timer';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { tap, map, skip, delay, filter, switchMap, combineLatest, distinctUntilChanged } from 'rxjs/operators';\r\n\r\nexport class NgProgressRef {\r\n\r\n  private _state: NgProgressState = {active: false, value: 0};\r\n  private _config: NgProgressConfig;\r\n\r\n  /** Worker subscription used to unsubscribe from trickling$ stream */\r\n  private _workerSub$: Subscription;\r\n\r\n  /** Stream that increments and updates progress state */\r\n  private _trickling$ = new Subject();\r\n\r\n  /** Stream that emits when progress state is changed */\r\n  state$ = new BehaviorSubject<NgProgressState>(this._state);\r\n\r\n  /** Stream that emits when config is changed */\r\n  config$ = new Subject<NgProgressConfig>();\r\n\r\n  get isStarted(): boolean {\r\n    return this._state.active;\r\n  }\r\n\r\n  /** Progress start event */\r\n  get started(): Observable<boolean> {\r\n    return this.state$.pipe(\r\n      map((state: NgProgressState) => state.active),\r\n      distinctUntilChanged(),\r\n      filter(active => active)\r\n    );\r\n  }\r\n\r\n  /** Progress ended event */\r\n  get completed(): Observable<boolean> {\r\n    return this.state$.pipe(\r\n      map((state: NgProgressState) => state.active),\r\n      distinctUntilChanged(),\r\n      filter(active => !active),\r\n      skip(1)\r\n    );\r\n  }\r\n\r\n  constructor(config: NgProgressConfig) {\r\n\r\n    /**\r\n     * Trickling stream starts the timer that increment the progress bar continuously\r\n     * This stream makes it possible to use latest config values while incrementing\r\n     */\r\n    this._workerSub$ = this._trickling$.pipe(\r\n      combineLatest(this.config$),\r\n      switchMap(([start, latestConfig]) => start ? this._trickling(latestConfig) : this._complete(latestConfig))\r\n    ).subscribe();\r\n\r\n    this.setConfig(config);\r\n  }\r\n\r\n  start() {\r\n    if (!this.isStarted) {\r\n      this.set(this._config.min);\r\n    }\r\n    this._trickling$.next(true);\r\n  }\r\n\r\n  complete() {\r\n    if (this.isStarted) {\r\n      this._trickling$.next(false);\r\n    }\r\n  }\r\n\r\n  inc(amount?: number) {\r\n\r\n    let n = this._state.value;\r\n\r\n    if (!this.isStarted) {\r\n      this.start();\r\n    } else {\r\n      if (typeof amount !== 'number') {\r\n        if (n >= 0 && n < 20) {\r\n          amount = 10;\r\n        } else if (n >= 20 && n < 50) {\r\n          amount = 4;\r\n        } else if (n >= 50 && n < 80) {\r\n          amount = 2;\r\n        } else if (n >= 80 && n < 99) {\r\n          amount = 0.5;\r\n        } else {\r\n          amount = 0;\r\n        }\r\n      }\r\n      n = this._clamp(n + amount);\r\n      this.set(n);\r\n    }\r\n  }\r\n\r\n  set(n: number) {\r\n    this._setState({value: this._clamp(n), active: true});\r\n  }\r\n\r\n  setConfig(config: NgProgressConfig) {\r\n    this._config = {...this._config, ...config};\r\n    this.config$.next(this._config);\r\n  }\r\n\r\n  /**\r\n   * Meant to be used internally and not by user directly\r\n   * Users should use NgProgressManager.destroy(id) instead\r\n   */\r\n  destroy() {\r\n    this._workerSub$.unsubscribe();\r\n    this._trickling$.unsubscribe();\r\n    this.state$.unsubscribe();\r\n    this.config$.unsubscribe();\r\n  }\r\n\r\n  private _setState(state: NgProgressState) {\r\n    this._state = {...this._state, ...state};\r\n    this.state$.next(this._state);\r\n  }\r\n\r\n  /** Clamps a value to be between min and max */\r\n  private _clamp(n): number {\r\n    return Math.max(this._config.min, Math.min(this._config.max, n));\r\n  }\r\n\r\n  /** Keeps incrementing the progress */\r\n  private _trickling(config: NgProgressConfig) {\r\n    return timer(0, config.trickleSpeed).pipe(tap(() => this.inc()));\r\n  }\r\n\r\n  /** Completes then resets the progress */\r\n  private _complete(config: NgProgressConfig) {\r\n    return of({}).pipe(\r\n      // Completes the progress\r\n      tap(() => this._setState({value: 100})),\r\n\r\n      // Hides the progress bar after a tiny delay\r\n      delay(config.speed * 1.7),\r\n      tap(() => this._setState({active: false})),\r\n\r\n      // Resets the progress state\r\n      delay(config.speed),\r\n      tap(() => this._setState({value: 0}))\r\n    );\r\n  }\r\n}\r\n"
  ],
  "names": [
    "Injectable",
    "empty$1",
    "delay",
    "tap",
    "of$1",
    "timer$1",
    "map",
    "distinctUntilChanged",
    "filter",
    "skip",
    "BehaviorSubject$1"
  ],
  "mappings": "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"
}
