{
  "version": 3,
  "file": "ngx-progressbar-core.umd.min.js",
  "sources": [
    "ng://@ngx-progressbar/core/src/ng-progress.component.ts",
    "ng://@ngx-progressbar/core/src/ng-progress-ref.ts",
    "ng://@ngx-progressbar/core/src/ng-progress.service.ts",
    "ng://@ngx-progressbar/core/src/ng-progress.token.ts"
  ],
  "sourcesContent": [
    "/**\r\n * @license\r\n * Copyright ngx-progressbar All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://github.com/MurhafSousli/ngx-progressbar/blob/master/LICENSE\r\n */\r\n\r\nimport {\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Output,\r\n  ChangeDetectionStrategy,\r\n  EventEmitter,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { NgProgress } from './ng-progress.service';\r\nimport { NgProgressRef } from './ng-progress-ref';\r\nimport { NgProgressState } from './ng-progress.interface';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { map } from 'rxjs/operators/map';\r\n\r\n@Component({\r\n  selector: 'ng-progress',\r\n  host: {\r\n    'role': 'progressbar',\r\n    '[attr.spinnerPosition]': 'spinnerPosition',\r\n    '[attr.dir]': 'direction',\r\n    '[attr.thick]': 'thick',\r\n    '[attr.style]': `sanitizer.bypassSecurityTrustStyle('--color:' + color + ';--speed:' + speed + 'ms;--ease:' + ease)`\r\n  },\r\n  template: `\r\n    <ng-container *ngIf=\"state$ | async; let state\">\r\n      <div class=\"ng-progress-bar\" [class.-active]=\"state.active\">\r\n        <div class=\"bar-placeholder\">\r\n          <div class=\"bar\" [ngStyle]=\"state.transform\">\r\n            <div *ngIf=\"meteor\" class=\"meteor\"></div>\r\n          </div>\r\n        </div>\r\n        <div *ngIf=\"spinner\" class=\"spinner\">\r\n          <div class=\"spinner-icon\"></div>\r\n        </div>\r\n      </div>\r\n    </ng-container>\r\n  `,\r\n  styles: [`ng-progress {\n  z-index: 999999;\n  pointer-events: none;\n  position: relative; }\n\n.ng-progress-bar {\n  z-index: 999999;\n  top: 0;\n  left: 0;\n  width: 100%;\n  position: fixed;\n  zoom: 1;\n  filter: alpha(opacity=0);\n  opacity: 0;\n  -webkit-transition: opacity var(--speed) var(--ease);\n  transition: opacity var(--speed) var(--ease); }\n  .ng-progress-bar .bar {\n    -webkit-transition: none;\n    transition: none; }\n  .ng-progress-bar.-active {\n    filter: alpha(opacity=100);\n    opacity: 1;\n    -webkit-transition: none;\n    transition: none; }\n    .ng-progress-bar.-active .bar {\n      -webkit-transition: all var(--speed) var(--ease);\n      transition: all var(--speed) var(--ease); }\n\n.bar-placeholder {\n  position: absolute;\n  height: 2px;\n  width: 100%; }\n\n.bar {\n  width: 100%;\n  height: 100%;\n  -webkit-transform: translate(-100%, 0, 0);\n          transform: translate(-100%, 0, 0);\n  background-color: var(--color); }\n\n.meteor {\n  display: block;\n  position: absolute;\n  width: 100px;\n  height: 100%;\n  opacity: 1.0;\n  -webkit-box-shadow: 0 0 10px var(--color), 0 0 5px var(--color);\n          box-shadow: 0 0 10px var(--color), 0 0 5px var(--color); }\n\n.spinner {\n  display: block;\n  position: fixed;\n  z-index: 1031;\n  top: 15px; }\n\n.spinner-icon {\n  width: 18px;\n  height: 18px;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  -webkit-animation: spinner-animation 400ms linear infinite;\n          animation: spinner-animation 400ms linear infinite;\n  border: 2px solid transparent;\n  border-radius: 50%;\n  border-top-color: var(--color);\n  border-left-color: var(--color); }\n\n[dir='ltr+'] .meteor, [dir='ltr-'] .meteor {\n  -webkit-transform: rotate(3deg);\n          transform: rotate(3deg); }\n\n[dir='ltr+'][thick='true'] .meteor, [dir='ltr-'][thick='true'] .meteor {\n  -webkit-transform: rotate(4deg);\n          transform: rotate(4deg); }\n\n[dir='ltr+'] .bar, [dir='rtl+'] .bar {\n  margin-left: -100%; }\n\n[dir='ltr+'] .meteor, [dir='rtl+'] .meteor {\n  right: 0; }\n\n[dir='ltr+'] .meteor, [dir='rtl-'] .meteor {\n  top: -3px; }\n\n[dir='ltr+'][thick='true'] .meteor, [dir='rtl-'][thick='true'] .meteor {\n  top: -4px; }\n\n[dir='ltr-'] .meteor, [dir='rtl+'] .meteor {\n  bottom: -3px; }\n\n[dir='ltr-'][thick='true'] .meteor, [dir='rtl+'][thick='true'] .meteor {\n  bottom: -4px; }\n\n[dir='ltr-'] .bar-placeholder, [dir='rtl+'] .bar-placeholder {\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg); }\n\n[dir='ltr-'] .spinner-icon, [dir='rtl+'] .spinner-icon {\n  animation-direction: reverse; }\n\n[dir='rtl+'] .meteor, [dir='rtl-'] .meteor {\n  -webkit-transform: rotate(-3deg);\n          transform: rotate(-3deg); }\n\n[dir='rtl+'][thick='true'] .meteor, [dir='rtl-'][thick='true'] .meteor {\n  -webkit-transform: rotate(-4deg);\n          transform: rotate(-4deg); }\n\n[thick='true'] .spinner-icon {\n  width: 24px;\n  height: 24px;\n  border-width: 3px; }\n\n[thick='true'] .bar-placeholder {\n  height: 3px; }\n\n[spinnerPosition='left'] .spinner {\n  left: 15px;\n  right: unset; }\n\n[spinnerPosition='right'] .spinner {\n  right: 15px; }\n\n@-webkit-keyframes spinner-animation {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n@keyframes spinner-animation {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n`],\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  preserveWhitespaces: false\r\n})\r\n\r\nexport class NgProgressComponent implements OnInit, OnChanges, OnDestroy {\r\n\r\n  private _started$: Subscription;\r\n  private _completed$: Subscription;\r\n\r\n  /** Progress bar worker */\r\n  progressRef: NgProgressRef;\r\n\r\n  /** Progress state stream */\r\n  state$: Observable<{ active: boolean, transform: any }>;\r\n\r\n  /** Creates a new instance if id is not already exists */\r\n  @Input() id = 'root';\r\n\r\n  /** Initializes inputs from the global config */\r\n  @Input() spinnerPosition: 'left' | 'right' = this._ngProgress.config.spinnerPosition;\r\n  @Input() direction: 'ltr+' | 'ltr-' | 'rtl+' | 'rtl-' = this._ngProgress.config.direction;\r\n  @Input() ease: string = this._ngProgress.config.ease;\r\n  @Input() color: string = this._ngProgress.config.color;\r\n  @Input() meteor: boolean = this._ngProgress.config.meteor;\r\n  @Input() spinner: boolean = this._ngProgress.config.spinner;\r\n  @Input() thick: boolean = this._ngProgress.config.thick;\r\n  @Input() max: number = this._ngProgress.config.max;\r\n  @Input() min: number = this._ngProgress.config.min;\r\n  @Input() speed: number = this._ngProgress.config.speed;\r\n  @Input() trickleSpeed: number = this._ngProgress.config.trickleSpeed;\r\n\r\n  @Output() started = new EventEmitter();\r\n  @Output() completed = new EventEmitter();\r\n\r\n  constructor(private _ngProgress: NgProgress, public sanitizer: DomSanitizer) {\r\n  }\r\n\r\n  ngOnChanges() {\r\n    if (this.progressRef instanceof NgProgressRef) {\r\n\r\n      // Update progress bar config when input changes\r\n      this.progressRef.setConfig({\r\n        max: (this.max > 0 && this.max <= 100) ? this.max : 100,\r\n        min: (this.min < 100 && this.min >= 0) ? this.min : 0,\r\n        speed: this.speed,\r\n        trickleSpeed: this.trickleSpeed,\r\n      });\r\n    } else {\r\n\r\n      // Get progress bar service instance\r\n      this.progressRef = this._ngProgress.ref(this.id, {\r\n        max: this.max,\r\n        min: this.min,\r\n        speed: this.speed,\r\n        trickleSpeed: this.trickleSpeed,\r\n      });\r\n      this.state$ = this.progressRef.state$.pipe(map((state: NgProgressState) => ({\r\n        active: state.active,\r\n        transform: {transform: `translate3d(${state.value}%, 0, 0)`}\r\n      })));\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    /** Subscribes to started and completed events when user used them */\r\n    if (this.started.observers.length) {\r\n      this._started$ = this.progressRef.started.subscribe(() => this.started.next());\r\n    }\r\n    if (this.completed.observers.length) {\r\n      this._completed$ = this.progressRef.completed.subscribe(() => this.completed.next());\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._started$) {\r\n      this._started$.unsubscribe();\r\n    }\r\n    if (this._completed$) {\r\n      this._completed$.unsubscribe();\r\n    }\r\n    this._ngProgress.destroy(this.id);\r\n  }\r\n\r\n  start() {\r\n    this.progressRef.start();\r\n  }\r\n\r\n  complete() {\r\n    this.progressRef.complete();\r\n  }\r\n\r\n  inc(n?: number) {\r\n    this.progressRef.inc(n);\r\n  }\r\n\r\n  set(n: number) {\r\n    this.progressRef.set(n);\r\n  }\r\n\r\n  get isStarted() {\r\n    return this.progressRef.isStarted;\r\n  }\r\n}\r\n",
    "import { NgProgressState, NgProgressConfig } from './ng-progress.interface';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { timer } from 'rxjs/observable/timer';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { of } from 'rxjs/observable/of';\r\nimport { tap, map, skip, delay, filter, switchMap, combineLatest, distinctUntilChanged } from 'rxjs/operators';\r\n\r\nexport class NgProgressRef {\r\n\r\n  private _state: NgProgressState = {active: false, value: 0};\r\n  private _config: NgProgressConfig;\r\n\r\n  /** Worker subscription used to unsubscribe from trickling$ stream */\r\n  private _workerSub$: Subscription;\r\n\r\n  /** Stream that increments and updates progress state */\r\n  private _trickling$ = new Subject();\r\n\r\n  /** Stream that emits when progress state is changed */\r\n  state$ = new BehaviorSubject<NgProgressState>(this._state);\r\n\r\n  /** Stream that emits when config is changed */\r\n  config$ = new Subject<NgProgressConfig>();\r\n\r\n  get isStarted(): boolean {\r\n    return this._state.active;\r\n  }\r\n\r\n  /** Progress start event */\r\n  get started(): Observable<boolean> {\r\n    return this.state$.pipe(\r\n      map((state: NgProgressState) => state.active),\r\n      distinctUntilChanged(),\r\n      filter(active => active)\r\n    );\r\n  }\r\n\r\n  /** Progress ended event */\r\n  get completed(): Observable<boolean> {\r\n    return this.state$.pipe(\r\n      map((state: NgProgressState) => state.active),\r\n      distinctUntilChanged(),\r\n      filter(active => !active),\r\n      skip(1)\r\n    );\r\n  }\r\n\r\n  constructor(config: NgProgressConfig) {\r\n\r\n    /**\r\n     * Trickling stream starts the timer that increment the progress bar continuously\r\n     * This stream makes it possible to use latest config values while incrementing\r\n     */\r\n    this._workerSub$ = this._trickling$.pipe(\r\n      combineLatest(this.config$),\r\n      switchMap(([start, latestConfig]) => start ? this._trickling(latestConfig) : this._complete(latestConfig))\r\n    ).subscribe();\r\n\r\n    this.setConfig(config);\r\n  }\r\n\r\n  start() {\r\n    if (!this.isStarted) {\r\n      this.set(this._config.min);\r\n    }\r\n    this._trickling$.next(true);\r\n  }\r\n\r\n  complete() {\r\n    if (this.isStarted) {\r\n      this._trickling$.next(false);\r\n    }\r\n  }\r\n\r\n  inc(amount?: number) {\r\n\r\n    let n = this._state.value;\r\n\r\n    if (!this.isStarted) {\r\n      this.start();\r\n    } else {\r\n      if (typeof amount !== 'number') {\r\n        if (n >= 0 && n < 20) {\r\n          amount = 10;\r\n        } else if (n >= 20 && n < 50) {\r\n          amount = 4;\r\n        } else if (n >= 50 && n < 80) {\r\n          amount = 2;\r\n        } else if (n >= 80 && n < 99) {\r\n          amount = 0.5;\r\n        } else {\r\n          amount = 0;\r\n        }\r\n      }\r\n      n = this._clamp(n + amount);\r\n      this.set(n);\r\n    }\r\n  }\r\n\r\n  set(n: number) {\r\n    this._setState({value: this._clamp(n), active: true});\r\n  }\r\n\r\n  setConfig(config: NgProgressConfig) {\r\n    this._config = {...this._config, ...config};\r\n    this.config$.next(this._config);\r\n  }\r\n\r\n  /**\r\n   * Meant to be used internally and not by user directly\r\n   * Users should use NgProgressManager.destroy(id) instead\r\n   */\r\n  destroy() {\r\n    this._workerSub$.unsubscribe();\r\n    this._trickling$.unsubscribe();\r\n    this.state$.unsubscribe();\r\n    this.config$.unsubscribe();\r\n  }\r\n\r\n  private _setState(state: NgProgressState) {\r\n    this._state = {...this._state, ...state};\r\n    this.state$.next(this._state);\r\n  }\r\n\r\n  /** Clamps a value to be between min and max */\r\n  private _clamp(n): number {\r\n    return Math.max(this._config.min, Math.min(this._config.max, n));\r\n  }\r\n\r\n  /** Keeps incrementing the progress */\r\n  private _trickling(config: NgProgressConfig) {\r\n    return timer(0, config.trickleSpeed).pipe(tap(() => this.inc()));\r\n  }\r\n\r\n  /** Completes then resets the progress */\r\n  private _complete(config: NgProgressConfig) {\r\n    return of({}).pipe(\r\n      // Completes the progress\r\n      tap(() => this._setState({value: 100})),\r\n\r\n      // Hides the progress bar after a tiny delay\r\n      delay(config.speed * 1.7),\r\n      tap(() => this._setState({active: false})),\r\n\r\n      // Resets the progress state\r\n      delay(config.speed),\r\n      tap(() => this._setState({value: 0}))\r\n    );\r\n  }\r\n}\r\n",
    "import { Injectable, Inject, Optional } from '@angular/core';\r\nimport { NgProgressRef } from './ng-progress-ref';\r\nimport { NgProgressConfig } from './ng-progress.interface';\r\nimport { empty } from 'rxjs/observable/empty';\r\nimport { CONFIG } from './ng-progress.token';\r\n\r\nconst defaultConfig: NgProgressConfig = {\r\n  meteor: true,\r\n  spinner: true,\r\n  thick: false,\r\n  ease: 'linear',\r\n  spinnerPosition: 'right',\r\n  direction: 'ltr+',\r\n  color: '#1B95E0',\r\n  max: 100,\r\n  min: 8,\r\n  speed: 200,\r\n  trickleSpeed: 300\r\n};\r\n\r\n@Injectable()\r\nexport class NgProgress {\r\n\r\n  /** Stores NgProgressRef instances */\r\n  private readonly _instances = {};\r\n\r\n  /** Global config */\r\n  config: NgProgressConfig;\r\n\r\n  constructor(@Optional() @Inject(CONFIG) config: NgProgressConfig) {\r\n    this.config = {...defaultConfig, ...config};\r\n  }\r\n\r\n  /**\r\n   * Returns NgProgressRef by ID\r\n   */\r\n  ref(id = 'root', config?: NgProgressConfig) {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      return this._instances[id];\r\n    } else {\r\n      config = {...this.config, ...config};\r\n      return this._instances[id] = new NgProgressRef(config);\r\n    }\r\n  }\r\n\r\n  setConfig(config: NgProgressConfig, id = 'root') {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      this._instances[id].setConfig(config);\r\n    }\r\n  }\r\n\r\n  start(id = 'root') {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      this._instances[id].start();\r\n    }\r\n  }\r\n\r\n  set(n: number, id = 'root') {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      this._instances[id].set(n);\r\n    }\r\n  }\r\n\r\n  inc(n?: number, id = 'root') {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      this._instances[id].inc(n);\r\n    }\r\n  }\r\n\r\n  complete(id = 'root') {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      this._instances[id].complete();\r\n    }\r\n  }\r\n\r\n  isStarted(id = 'root') {\r\n    return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].isStarted : false;\r\n  }\r\n\r\n  started(id = 'root') {\r\n    return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].started : empty();\r\n  }\r\n\r\n  completed(id = 'root') {\r\n    return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].ended : empty();\r\n  }\r\n\r\n  destroy(id = 'root') {\r\n    if (this._instances[id] instanceof NgProgressRef) {\r\n      this._instances[id].destroy();\r\n      this._instances[id] = null;\r\n    }\r\n  }\r\n\r\n  destroyAll() {\r\n    Object.keys(this._instances).map((key) => {\r\n      this._instances[key].destroy();\r\n      this._instances[key] = null;\r\n    });\r\n  }\r\n}\r\n",
    "import { InjectionToken } from '@angular/core';\r\nimport { NgProgressConfig } from './ng-progress.interface';\r\n\r\nexport const CONFIG = new InjectionToken<NgProgressConfig>('config');\r\n"
  ],
  "names": [
    "NgProgressComponent",
    "_ngProgress",
    "sanitizer",
    "this",
    "id",
    "direction",
    "config",
    "color",
    "meteor",
    "spinner",
    "thick",
    "max",
    "min",
    "speed",
    "prototype",
    "ngOnChanges",
    "progressRef",
    "NgProgressRef",
    "setConfig",
    "trickleSpeed",
    "_this",
    "started",
    "observers",
    "length",
    "_completed$",
    "completed",
    "subscribe",
    "next",
    "ngOnDestroy",
    "_started$",
    "unsubscribe",
    "destroy",
    "state$",
    "BehaviorSubject$1",
    "_state",
    "Object",
    "defineProperty",
    "get",
    "active",
    "enumerable",
    "configurable",
    "pipe",
    "map",
    "state",
    "distinctUntilChanged",
    "filter",
    "skip",
    "start",
    "isStarted",
    "set",
    "_config",
    "_trickling$",
    "complete",
    "inc",
    "amount",
    "n",
    "value",
    "config$",
    "assign",
    "_clamp",
    "_trickling",
    "timer$1",
    "tap",
    "_complete",
    "of$1",
    "delay",
    "_setState",
    "defaultConfig",
    "ease",
    "spinnerPosition",
    "NgProgress",
    "_instances",
    "ended",
    "empty$1",
    "destroyAll",
    "keys",
    "key",
    "decorators",
    "type",
    "Injectable"
  ],
  "mappings": "wzCC2BIG,KAAJ6B,OAAA,IAAsBC,EAAAA,gBAAtB9B,KAAA+B,kNAaM/B,KAANe,UAAAZ,GChBA,ODuBA6B,OAAAC,eAAAnB,EAAAH,UAAA,aAgBAuB,IAAA,WACQ,OAARlC,KAAA+B,OAAAI,QAEAC,YAAA,EACIC,cAAJ,iDAKAH,IAAA,WACA,OAAAlC,KAAA6B,OAAAS,KAAAC,EAAAA,IAAA,SAAAC,GAAA,OAAAA,EAAAL,SAAAM,EAAAA,uBAAAC,EAAAA,OAAA,SAAAP,GAAA,OAAAA,qFASAD,IAAA,WAAA,OAAAlC,KAAA6B,OAAAS,KAAAC,EAAAA,IAAA,SAAAC,GAAA,OAAAA,EAAAL,SAAAM,EAAAA,uBAAAC,EAAAA,OAAA,SAAAP,GAAA,OAAAA,IAAAQ,EAAAA,KAAA,KAEAP,YAAY,EACZC,cAAA,IAGAvB,EAAAH,UAAAiC,MAA8B,WAC9B5C,KAAA6C,WACA7C,KAAS8C,IAAT9C,KAAA+C,QAAAtC,KACAT,KAAAgD,YAAAxB,MAAA,IAIAV,EAAAH,UAAAsC,SAAA,WACMjD,KAAN6C,WACM7C,KAAKgD,YAAXxB,MAAA,IAIEV,EAAFH,UAAAuC,IAAA,SAAAC,GACI,IAAJC,EAAApD,KAAA+B,OAAwCsB,MACxCrD,KAAA6C,gCAGgBM,EADoBC,GAApC,GAAAA,EAAA,GACA,GAEAA,GAAA,IAAAA,EAAA,mBAMAA,GAAA,IAAAA,EAAA,GACA,GAGA,uWAmBApD,KAAmBsD,QAAnB3B,iDAUM3B,KAAK+B,OAAXC,OACMuB,UADNvD,KAAA+B,OAC8BS,kCEpJ9B1B,EAAAH,UAAA6C,OAAA,SAAAJ,mEDQEtC,EAAFH,UAAA8C,WAAA,SAAAtD,GACA,IAAAc,EAAAjB,KACM,OAAN0D,EAAAA,MAAA,EAAAvD,EAAAa,cAAAsB,KAAAqB,EAAAA,IAAA,WAAA,OAAA1C,EAAAiC,UAOEpC,EAAcH,UAAhBiD,UAAA,SAAAzD,GACA,IAAAc,EAAAjB,KAGA,OAAA6D,EAAAA,OAAAvB,wDAQAwB,EAAAA,MAAA,IAAA3D,EAAAO,OAAAiD,EAAAA,IAAA,WAAA,OAAA1C,EAAA8C,WAAA5B,QAAA,0EALArB,sCAcAkD,GACA3D,QAAA,EAAAC,SAAW,EACXC,OAAA,EACA0D,KAAA,SACAC,gBAAA,QACAhE,UAAA,iEAGAiE,EAAA,yBAKAnE,KAAAoE,cACIpE,KAAJG,OAAA6B,OAAAuB,UAAAS,EAAA7D,GFqKA,qCE/JI,YADJ,IAAAF,IAAAA,EAAA,QACQD,KAAKoE,WAAWnE,aAAea,EACvCd,KAAAoE,WAA6BnE,oEAQ7BkE,EAAAxD,UAAAI,UAAA,SAAAZ,EAAAF,4MAYEkE,EAAFxD,UAAAmC,IAAA,SAAAM,EAAAnD,QACA,IAAAA,IAAAA,EAA8B,QAC9BD,KAAAoE,WAAAnE,aAAAa,mHAMUd,KAAKoE,WAAfnE,GAAAiD,IAAAE,4DAOApD,KAAAoE,WAAAnE,aAAAa,GACAd,KAAAoE,WAAAnE,GAAAgD,YA3EAkB,EAAAxD,UAAAkC,UAAA,SAAA5C,oQFZA,8BAAAD,KAAAoE,WAAAnE,aAAAa,EAAAd,KAAAoE,WAAAnE,GAAAoE,MAAAC,EAAAA,SAwNAH,EAAAxD,UAAAiB,QAAA,SAAA3B,QAAA,IAAAA,IAAAA,EAA+D,gGAd/DkE,EAAAxD,UAA0D4D,WAA1D,WACA,IAAAtD,EAA0BjB,KAC1BgC,OAAAwC,KAAAxE,KAA+BoE,YAAY7B,IAA3C,SAAAkC,GACAxD,EAAAmD,WAAAK,GAAA7C,UACAX,EAAAmD,WAAAK,GAAA,QAGAN,EE3KA,GF6KAA,EAAAO,aAEAC,KAAAC,EAAAA;;;;;;;;iBAuBA,SAAA/E,EAAAC,EAAAC,GACAC,KAAOF,YAAPA,EACAE,KAAAD,UAAAA,EAIAC,KAAAC,GAAA,oEAGAD,KAAAE,UAAAF,KAAAF,YAAAK,OAAAD,iDAEIF,KAAJI,MAAAJ,KAAAF,YAAAK,OAAAC,MACAJ,KAAAK,OAAAL,KAAAF,YAAAK,OAAwCE,OACxCL,KAAAM,QAAAN,KAAAF,YAAAK,OAAAG,QACIN,KAAJO,MAAAP,KAAsBF,YAAtBK,OAAyCI,MACzCP,KAAAQ,IAAAR,KAAAF,YAA8BK,OAA9BK,IACAR,KAAAS,IAAAT,KAAAF,YAAAK,OAAAM,IACAT,KAAAU,MAAAV,KAAAF,YAAAK,OAAAO,sIAMAb,EAAAc,UAAAC,YAAA,WACMZ,KAAKa,uBAAuBC,EAE1Bd,KAARa,YAAAE,WACAP,IAAAR,KAAAQ,IAAA,GAAAR,KAAAQ,KAAA,IAAAR,KAAAQ,IAAA,4JAMAC,IAAAT,KAAAS,IACAC,MAAAV,KAAAU,MACAM,aAAAhB,KAAAgB,+LAMM,IAANC,EAAAjB,KAEAA,KAAAkB,QAAAC,UAAAC,mIAEApB,KAAeqB,YAAfrB,KAAAa,YAAAS,UAAAC,UAAA,WAAA,OAAAN,EAAAK,UAAAE,WArQA3B,EAAUc,UAAVc,YAAA,WACAzB,KAAA0B,WACA1B,KAAA0B,UAAAC,cAEA3B,KAAAqB,aACArB,KAAAqB,YAAAM,cAEA3B,KAAAF,YAAA8B,QAAA5B,KAAAC"
}
