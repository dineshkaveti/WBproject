var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Injectable, InjectionToken, Input, NgModule, Optional, Output, ViewEncapsulation } from '@angular/core';
import { CommonModule } from '@angular/common';
import { DomSanitizer } from '@angular/platform-browser';
import { BehaviorSubject as BehaviorSubject$1 } from 'rxjs/BehaviorSubject';
import { timer as timer$1 } from 'rxjs/observable/timer';
import { Subject as Subject$1 } from 'rxjs/Subject';
import { of as of$1 } from 'rxjs/observable/of';
import { combineLatest, delay, distinctUntilChanged, filter, map, skip, switchMap, tap } from 'rxjs/operators';
import { empty as empty$1 } from 'rxjs/observable/empty';
import { map as map$2 } from 'rxjs/operators/map';
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgProgressRef = (function () {
    /**
     * @param {?} config
     */
    function NgProgressRef(config) {
        var _this = this;
        this._state = { active: false, value: 0 };
        /**
         * Stream that increments and updates progress state
         */
        this._trickling$ = new Subject$1();
        /**
         * Stream that emits when progress state is changed
         */
        this.state$ = new BehaviorSubject$1(this._state);
        /**
         * Stream that emits when config is changed
         */
        this.config$ = new Subject$1();
        /**
             * Trickling stream starts the timer that increment the progress bar continuously
             * This stream makes it possible to use latest config values while incrementing
             */
        this._workerSub$ = this._trickling$.pipe(combineLatest(this.config$), switchMap(function (_a) {
            var _b = __read(_a, 2), start = _b[0], latestConfig = _b[1];
            return start ? _this._trickling(latestConfig) : _this._complete(latestConfig);
        })).subscribe();
        this.setConfig(config);
    }
    Object.defineProperty(NgProgressRef.prototype, "isStarted", {
        /**
         * @return {?}
         */
        get: function () {
            return this._state.active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgProgressRef.prototype, "started", {
        /**
         * Progress start event
         * @return {?}
         */
        get: function () {
            return this.state$.pipe(map(function (state) { return state.active; }), distinctUntilChanged(), filter(function (active) { return active; }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgProgressRef.prototype, "completed", {
        /**
         * Progress ended event
         * @return {?}
         */
        get: function () {
            return this.state$.pipe(map(function (state) { return state.active; }), distinctUntilChanged(), filter(function (active) { return !active; }), skip(1));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NgProgressRef.prototype.start = function () {
        if (!this.isStarted) {
            this.set(this._config.min);
        }
        this._trickling$.next(true);
    };
    /**
     * @return {?}
     */
    NgProgressRef.prototype.complete = function () {
        if (this.isStarted) {
            this._trickling$.next(false);
        }
    };
    /**
     * @param {?=} amount
     * @return {?}
     */
    NgProgressRef.prototype.inc = function (amount) {
        var /** @type {?} */ n = this._state.value;
        if (!this.isStarted) {
            this.start();
        }
        else {
            if (typeof amount !== 'number') {
                if (n >= 0 && n < 20) {
                    amount = 10;
                }
                else if (n >= 20 && n < 50) {
                    amount = 4;
                }
                else if (n >= 50 && n < 80) {
                    amount = 2;
                }
                else if (n >= 80 && n < 99) {
                    amount = 0.5;
                }
                else {
                    amount = 0;
                }
            }
            n = this._clamp(n + amount);
            this.set(n);
        }
    };
    /**
     * @param {?} n
     * @return {?}
     */
    NgProgressRef.prototype.set = function (n) {
        this._setState({ value: this._clamp(n), active: true });
    };
    /**
     * @param {?} config
     * @return {?}
     */
    NgProgressRef.prototype.setConfig = function (config) {
        this._config = Object.assign({}, this._config, config);
        this.config$.next(this._config);
    };
    /**
     * Meant to be used internally and not by user directly
     * Users should use NgProgressManager.destroy(id) instead
     * @return {?}
     */
    NgProgressRef.prototype.destroy = function () {
        this._workerSub$.unsubscribe();
        this._trickling$.unsubscribe();
        this.state$.unsubscribe();
        this.config$.unsubscribe();
    };
    /**
     * @param {?} state
     * @return {?}
     */
    NgProgressRef.prototype._setState = function (state) {
        this._state = Object.assign({}, this._state, state);
        this.state$.next(this._state);
    };
    /**
     * Clamps a value to be between min and max
     * @param {?} n
     * @return {?}
     */
    NgProgressRef.prototype._clamp = function (n) {
        return Math.max(this._config.min, Math.min(this._config.max, n));
    };
    /**
     * Keeps incrementing the progress
     * @param {?} config
     * @return {?}
     */
    NgProgressRef.prototype._trickling = function (config) {
        var _this = this;
        return timer$1(0, config.trickleSpeed).pipe(tap(function () { return _this.inc(); }));
    };
    /**
     * Completes then resets the progress
     * @param {?} config
     * @return {?}
     */
    NgProgressRef.prototype._complete = function (config) {
        var _this = this;
        return of$1({}).pipe(
        // Completes the progress
        tap(function () { return _this._setState({ value: 100 }); }), 
        // Hides the progress bar after a tiny delay
        delay(config.speed * 1.7), tap(function () { return _this._setState({ active: false }); }), 
        // Resets the progress state
        delay(config.speed), tap(function () { return _this._setState({ value: 0 }); }));
    };
    return NgProgressRef;
}());
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var CONFIG = new InjectionToken('config');
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var defaultConfig = {
    meteor: true,
    spinner: true,
    thick: false,
    ease: 'linear',
    spinnerPosition: 'right',
    direction: 'ltr+',
    color: '#1B95E0',
    max: 100,
    min: 8,
    speed: 200,
    trickleSpeed: 300
};
var NgProgress = (function () {
    /**
     * @param {?} config
     */
    function NgProgress(config) {
        /**
         * Stores NgProgressRef instances
         */
        this._instances = {};
        this.config = Object.assign({}, defaultConfig, config);
    }
    /**
     * Returns NgProgressRef by ID
     * @param {?=} id
     * @param {?=} config
     * @return {?}
     */
    NgProgress.prototype.ref = function (id, config) {
        if (id === void 0) { id = 'root'; }
        if (this._instances[id] instanceof NgProgressRef) {
            return this._instances[id];
        }
        else {
            config = Object.assign({}, this.config, config);
            return this._instances[id] = new NgProgressRef(config);
        }
    };
    /**
     * @param {?} config
     * @param {?=} id
     * @return {?}
     */
    NgProgress.prototype.setConfig = function (config, id) {
        if (id === void 0) { id = 'root'; }
        if (this._instances[id] instanceof NgProgressRef) {
            this._instances[id].setConfig(config);
        }
    };
    /**
     * @param {?=} id
     * @return {?}
     */
    NgProgress.prototype.start = function (id) {
        if (id === void 0) { id = 'root'; }
        if (this._instances[id] instanceof NgProgressRef) {
            this._instances[id].start();
        }
    };
    /**
     * @param {?} n
     * @param {?=} id
     * @return {?}
     */
    NgProgress.prototype.set = function (n, id) {
        if (id === void 0) { id = 'root'; }
        if (this._instances[id] instanceof NgProgressRef) {
            this._instances[id].set(n);
        }
    };
    /**
     * @param {?=} n
     * @param {?=} id
     * @return {?}
     */
    NgProgress.prototype.inc = function (n, id) {
        if (id === void 0) { id = 'root'; }
        if (this._instances[id] instanceof NgProgressRef) {
            this._instances[id].inc(n);
        }
    };
    /**
     * @param {?=} id
     * @return {?}
     */
    NgProgress.prototype.complete = function (id) {
        if (id === void 0) { id = 'root'; }
        if (this._instances[id] instanceof NgProgressRef) {
            this._instances[id].complete();
        }
    };
    /**
     * @param {?=} id
     * @return {?}
     */
    NgProgress.prototype.isStarted = function (id) {
        if (id === void 0) { id = 'root'; }
        return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].isStarted : false;
    };
    /**
     * @param {?=} id
     * @return {?}
     */
    NgProgress.prototype.started = function (id) {
        if (id === void 0) { id = 'root'; }
        return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].started : empty$1();
    };
    /**
     * @param {?=} id
     * @return {?}
     */
    NgProgress.prototype.completed = function (id) {
        if (id === void 0) { id = 'root'; }
        return (this._instances[id] instanceof NgProgressRef) ? this._instances[id].ended : empty$1();
    };
    /**
     * @param {?=} id
     * @return {?}
     */
    NgProgress.prototype.destroy = function (id) {
        if (id === void 0) { id = 'root'; }
        if (this._instances[id] instanceof NgProgressRef) {
            this._instances[id].destroy();
            this._instances[id] = null;
        }
    };
    /**
     * @return {?}
     */
    NgProgress.prototype.destroyAll = function () {
        var _this = this;
        Object.keys(this._instances).map(function (key) {
            _this._instances[key].destroy();
            _this._instances[key] = null;
        });
    };
    return NgProgress;
}());
NgProgress.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NgProgress.ctorParameters = function () { return [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CONFIG,] },] },
]; };
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @license
 * Copyright ngx-progressbar All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://github.com/MurhafSousli/ngx-progressbar/blob/master/LICENSE
 */
var NgProgressComponent = (function () {
    /**
     * @param {?} _ngProgress
     * @param {?} sanitizer
     */
    function NgProgressComponent(_ngProgress, sanitizer) {
        this._ngProgress = _ngProgress;
        this.sanitizer = sanitizer;
        /**
         * Creates a new instance if id is not already exists
         */
        this.id = 'root';
        /**
         * Initializes inputs from the global config
         */
        this.spinnerPosition = this._ngProgress.config.spinnerPosition;
        this.direction = this._ngProgress.config.direction;
        this.ease = this._ngProgress.config.ease;
        this.color = this._ngProgress.config.color;
        this.meteor = this._ngProgress.config.meteor;
        this.spinner = this._ngProgress.config.spinner;
        this.thick = this._ngProgress.config.thick;
        this.max = this._ngProgress.config.max;
        this.min = this._ngProgress.config.min;
        this.speed = this._ngProgress.config.speed;
        this.trickleSpeed = this._ngProgress.config.trickleSpeed;
        this.started = new EventEmitter();
        this.completed = new EventEmitter();
    }
    /**
     * @return {?}
     */
    NgProgressComponent.prototype.ngOnChanges = function () {
        if (this.progressRef instanceof NgProgressRef) {
            // Update progress bar config when input changes
            this.progressRef.setConfig({
                max: (this.max > 0 && this.max <= 100) ? this.max : 100,
                min: (this.min < 100 && this.min >= 0) ? this.min : 0,
                speed: this.speed,
                trickleSpeed: this.trickleSpeed,
            });
        }
        else {
            // Get progress bar service instance
            this.progressRef = this._ngProgress.ref(this.id, {
                max: this.max,
                min: this.min,
                speed: this.speed,
                trickleSpeed: this.trickleSpeed,
            });
            this.state$ = this.progressRef.state$.pipe(map$2(function (state) { return ({
                active: state.active,
                transform: { transform: "translate3d(" + state.value + "%, 0, 0)" }
            }); }));
        }
    };
    /**
     * @return {?}
     */
    NgProgressComponent.prototype.ngOnInit = function () {
        var _this = this;
        /** Subscribes to started and completed events when user used them */
        if (this.started.observers.length) {
            this._started$ = this.progressRef.started.subscribe(function () { return _this.started.next(); });
        }
        if (this.completed.observers.length) {
            this._completed$ = this.progressRef.completed.subscribe(function () { return _this.completed.next(); });
        }
    };
    /**
     * @return {?}
     */
    NgProgressComponent.prototype.ngOnDestroy = function () {
        if (this._started$) {
            this._started$.unsubscribe();
        }
        if (this._completed$) {
            this._completed$.unsubscribe();
        }
        this._ngProgress.destroy(this.id);
    };
    /**
     * @return {?}
     */
    NgProgressComponent.prototype.start = function () {
        this.progressRef.start();
    };
    /**
     * @return {?}
     */
    NgProgressComponent.prototype.complete = function () {
        this.progressRef.complete();
    };
    /**
     * @param {?=} n
     * @return {?}
     */
    NgProgressComponent.prototype.inc = function (n) {
        this.progressRef.inc(n);
    };
    /**
     * @param {?} n
     * @return {?}
     */
    NgProgressComponent.prototype.set = function (n) {
        this.progressRef.set(n);
    };
    Object.defineProperty(NgProgressComponent.prototype, "isStarted", {
        /**
         * @return {?}
         */
        get: function () {
            return this.progressRef.isStarted;
        },
        enumerable: true,
        configurable: true
    });
    return NgProgressComponent;
}());
NgProgressComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng-progress',
                host: {
                    'role': 'progressbar',
                    '[attr.spinnerPosition]': 'spinnerPosition',
                    '[attr.dir]': 'direction',
                    '[attr.thick]': 'thick',
                    '[attr.style]': "sanitizer.bypassSecurityTrustStyle('--color:' + color + ';--speed:' + speed + 'ms;--ease:' + ease)"
                },
                template: "\n    <ng-container *ngIf=\"state$ | async; let state\">\n      <div class=\"ng-progress-bar\" [class.-active]=\"state.active\">\n        <div class=\"bar-placeholder\">\n          <div class=\"bar\" [ngStyle]=\"state.transform\">\n            <div *ngIf=\"meteor\" class=\"meteor\"></div>\n          </div>\n        </div>\n        <div *ngIf=\"spinner\" class=\"spinner\">\n          <div class=\"spinner-icon\"></div>\n        </div>\n      </div>\n    </ng-container>\n  ",
                styles: ["ng-progress {\n  z-index: 999999;\n  pointer-events: none;\n  position: relative; }\n\n.ng-progress-bar {\n  z-index: 999999;\n  top: 0;\n  left: 0;\n  width: 100%;\n  position: fixed;\n  zoom: 1;\n  filter: alpha(opacity=0);\n  opacity: 0;\n  -webkit-transition: opacity var(--speed) var(--ease);\n  transition: opacity var(--speed) var(--ease); }\n  .ng-progress-bar .bar {\n    -webkit-transition: none;\n    transition: none; }\n  .ng-progress-bar.-active {\n    filter: alpha(opacity=100);\n    opacity: 1;\n    -webkit-transition: none;\n    transition: none; }\n    .ng-progress-bar.-active .bar {\n      -webkit-transition: all var(--speed) var(--ease);\n      transition: all var(--speed) var(--ease); }\n\n.bar-placeholder {\n  position: absolute;\n  height: 2px;\n  width: 100%; }\n\n.bar {\n  width: 100%;\n  height: 100%;\n  -webkit-transform: translate(-100%, 0, 0);\n          transform: translate(-100%, 0, 0);\n  background-color: var(--color); }\n\n.meteor {\n  display: block;\n  position: absolute;\n  width: 100px;\n  height: 100%;\n  opacity: 1.0;\n  -webkit-box-shadow: 0 0 10px var(--color), 0 0 5px var(--color);\n          box-shadow: 0 0 10px var(--color), 0 0 5px var(--color); }\n\n.spinner {\n  display: block;\n  position: fixed;\n  z-index: 1031;\n  top: 15px; }\n\n.spinner-icon {\n  width: 18px;\n  height: 18px;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  -webkit-animation: spinner-animation 400ms linear infinite;\n          animation: spinner-animation 400ms linear infinite;\n  border: 2px solid transparent;\n  border-radius: 50%;\n  border-top-color: var(--color);\n  border-left-color: var(--color); }\n\n[dir='ltr+'] .meteor, [dir='ltr-'] .meteor {\n  -webkit-transform: rotate(3deg);\n          transform: rotate(3deg); }\n\n[dir='ltr+'][thick='true'] .meteor, [dir='ltr-'][thick='true'] .meteor {\n  -webkit-transform: rotate(4deg);\n          transform: rotate(4deg); }\n\n[dir='ltr+'] .bar, [dir='rtl+'] .bar {\n  margin-left: -100%; }\n\n[dir='ltr+'] .meteor, [dir='rtl+'] .meteor {\n  right: 0; }\n\n[dir='ltr+'] .meteor, [dir='rtl-'] .meteor {\n  top: -3px; }\n\n[dir='ltr+'][thick='true'] .meteor, [dir='rtl-'][thick='true'] .meteor {\n  top: -4px; }\n\n[dir='ltr-'] .meteor, [dir='rtl+'] .meteor {\n  bottom: -3px; }\n\n[dir='ltr-'][thick='true'] .meteor, [dir='rtl+'][thick='true'] .meteor {\n  bottom: -4px; }\n\n[dir='ltr-'] .bar-placeholder, [dir='rtl+'] .bar-placeholder {\n  -webkit-transform: rotate(180deg);\n          transform: rotate(180deg); }\n\n[dir='ltr-'] .spinner-icon, [dir='rtl+'] .spinner-icon {\n  animation-direction: reverse; }\n\n[dir='rtl+'] .meteor, [dir='rtl-'] .meteor {\n  -webkit-transform: rotate(-3deg);\n          transform: rotate(-3deg); }\n\n[dir='rtl+'][thick='true'] .meteor, [dir='rtl-'][thick='true'] .meteor {\n  -webkit-transform: rotate(-4deg);\n          transform: rotate(-4deg); }\n\n[thick='true'] .spinner-icon {\n  width: 24px;\n  height: 24px;\n  border-width: 3px; }\n\n[thick='true'] .bar-placeholder {\n  height: 3px; }\n\n[spinnerPosition='left'] .spinner {\n  left: 15px;\n  right: unset; }\n\n[spinnerPosition='right'] .spinner {\n  right: 15px; }\n\n@-webkit-keyframes spinner-animation {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n@keyframes spinner-animation {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n"],
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                preserveWhitespaces: false
            },] },
];
/** @nocollapse */
NgProgressComponent.ctorParameters = function () { return [
    { type: NgProgress, },
    { type: DomSanitizer, },
]; };
NgProgressComponent.propDecorators = {
    "id": [{ type: Input },],
    "spinnerPosition": [{ type: Input },],
    "direction": [{ type: Input },],
    "ease": [{ type: Input },],
    "color": [{ type: Input },],
    "meteor": [{ type: Input },],
    "spinner": [{ type: Input },],
    "thick": [{ type: Input },],
    "max": [{ type: Input },],
    "min": [{ type: Input },],
    "speed": [{ type: Input },],
    "trickleSpeed": [{ type: Input },],
    "started": [{ type: Output },],
    "completed": [{ type: Output },],
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} config
 * @return {?}
 */
function NgProgressFactory(config) {
    return new NgProgress(config);
}
var NgProgressModule = (function () {
    function NgProgressModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    NgProgressModule.forRoot = function (config) {
        return {
            ngModule: NgProgressModule,
            providers: [
                { provide: CONFIG, useValue: config },
                {
                    provide: NgProgress,
                    useFactory: NgProgressFactory,
                    deps: [CONFIG]
                }
            ]
        };
    };
    return NgProgressModule;
}());
NgProgressModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NgProgressComponent],
                exports: [NgProgressComponent],
                imports: [CommonModule]
            },] },
];
/** @nocollapse */
NgProgressModule.ctorParameters = function () { return []; };
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */
export { NgProgressFactory, NgProgressModule, NgProgressComponent, NgProgressRef, NgProgress, CONFIG as ɵa };
//# sourceMappingURL=ngx-progressbar-core.js.map
